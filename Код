import tkinter as tk
from tkinter import messagebox
import customtkinter as ctk
import threading
import queue
import requests
import pandas as pd
import os
import time
import json
from datetime import datetime
import sys

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏–º–ø–æ—Ä—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ---
try:
    import openpyxl
    from openpyxl.styles import PatternFill
    from openpyxl.utils import get_column_letter
except ImportError:
    messagebox.showerror("–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞", "–¢—Ä–µ–±—É–µ—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ openpyxl. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–µ: pip install openpyxl")
    sys.exit(1)
try:
    import gspread
    from google.oauth2.service_account import Credentials
except ImportError:
    messagebox.showerror("–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞", "–¢—Ä–µ–±—É—é—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ gspread –∏ google-auth-oauthlib. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö: pip install gspread google-auth-oauthlib")
    sys.exit(1)

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è "—É–º–Ω–æ–≥–æ" –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ ---
def resource_path(relative_path):
    """ –ù–∞—Ö–æ–¥–∏—Ç –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ä–µ—Å—É—Ä—Å—É, —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞, –∏ –¥–ª—è .exe """
    try:
        # PyInstaller —Å–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—É—Ç—å –≤ _MEIPASS
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")
    return os.path.join(base_path, relative_path)

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
CONFIG_FILE = resource_path('config_k2.json')
CREDENTIALS_FILE = resource_path('credentials.json')
CONFIG = {}
RED_FILL = PatternFill(start_color="FFC7CE", end_color="FFC7CE", fill_type="solid")
YELLOW_FILL = PatternFill(start_color="FFEB9C", end_color="FFEB9C", fill_type="solid")
GREEN_FILL = PatternFill(start_color="C6EFCE", end_color="C6EFCE", fill_type="solid")

# --- –õ–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –∏ –¥–∞–Ω–Ω—ã–º–∏ (Backend) ---
class BackendLogic:
    def __init__(self, logger_queue):
        self.logger_queue = logger_queue

    def log(self, message):
        self.logger_queue.put(message)

    def load_config(self):
        try:
            with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
                global CONFIG
                CONFIG = json.load(f)
                self.log(f"‚úì –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
                return True
        except FileNotFoundError:
            self.log(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ '{os.path.basename(CONFIG_FILE)}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return False
        except json.JSONDecodeError:
            self.log(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –≤ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
            return False

    def get_status_by_thresholds(self, current_value, thresholds):
        if not thresholds: return "–ù–ï–¢ –î–ê–ù–ù–´–•", 0, None
        val_100, val_95, val_85 = thresholds.get('100%'), thresholds.get('95%'), thresholds.get('85%')
        if val_100 is None or val_95 is None: return "–ù–ï–¢ –î–ê–ù–ù–´–•", 0, None
        if val_85 is None: val_85 = val_100 * 0.85
        percentage = (current_value / val_100 * 100) if val_100 > 0 else 0
        if current_value >= val_95: return "üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–†–û–í–ï–ù–¨", percentage, RED_FILL
        if current_value >= val_85: return "üü° –í–´–°–û–ö–ê–Ø –ó–ê–ì–†–£–ó–ö–ê", percentage, YELLOW_FILL
        return "üü¢ –°–í–û–ë–û–î–ù–û", percentage, GREEN_FILL

    def login_and_get_token(self, session, url, username, password):
        self.log("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
        try:
            response = session.post(url, json={'phone_number': username, 'password': password}, timeout=15)
            response.raise_for_status()
            access_token = response.json().get('data', {}).get('access_token')
            if not access_token: raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ API.")
            self.log("‚úì –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
            return access_token
        except Exception as e:
            self.log(f"‚úó –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            raise

    def download_and_process_data(self, session, token):
        all_data_dfs = []
        data_url = CONFIG['api_settings']['data_url']
        headers = {'Authorization': f'Bearer {token}', 'Content-Type': 'application/json'}
        for warehouse in CONFIG['warehouses_to_process']:
            self.log(f"\n--- –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∫–ª–∞–¥–∞: {warehouse['name']} (ID: {warehouse['id']}) ---")
            for floor in warehouse['floors_to_process']:
                for row_num in warehouse.get('rows_to_process', []):
                    try:
                        payload = {'wh_id': warehouse['id'], 'stage': floor, 'street': row_num}
                        self.log(f"  –ó–∞–ø—Ä–æ—Å: –≠—Ç–∞–∂ {floor}, –†—è–¥ {row_num}...")
                        response = session.post(data_url, json=payload, headers=headers, timeout=20)
                        response.raise_for_status()
                        data = response.json()
                        if data and isinstance(data, list):
                            df = pd.DataFrame(data)
                            df['floor'], df['row_num'] = floor, row_num
                            all_data_dfs.append(df)
                            self.log(f"  ‚úì –ó–∞–ø—Ä–æ—Å: –≠—Ç–∞–∂ {floor}, –†—è–¥ {row_num}... –ü–æ–ª—É—á–µ–Ω–æ {len(data)} —Å—Ç—Ä–æ–∫.")
                        else:
                            self.log(f"  ‚úì –ó–∞–ø—Ä–æ—Å: –≠—Ç–∞–∂ {floor}, –†—è–¥ {row_num}... –ü—É—Å—Ç–æ.")
                    except Exception as e:
                        self.log(f"  ‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ (–≠—Ç–∞–∂ {floor}, –†—è–¥ {row_num}): {e}")
                    time.sleep(0.1)
        return pd.concat(all_data_dfs, ignore_index=True) if all_data_dfs else pd.DataFrame()

    def analyze_data(self, full_df):
        if full_df.empty:
            self.log("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            return {}, []
        self.log("\n–ê–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        category_data = {}
        row_data = []
        
        full_df.columns = [str(c).strip().lower() for c in full_df.columns]
        qty_col, box_id_col, place_col = 'qty', 'box_id', 'place_name'
        
        if qty_col not in full_df.columns:
            self.log(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ '{qty_col}'.")
            return {}, []
        
        full_df[qty_col] = pd.to_numeric(full_df[qty_col], errors='coerce').fillna(0).astype(int)
        if box_id_col in full_df.columns:
            full_df[box_id_col] = pd.to_numeric(full_df[box_id_col], errors='coerce').fillna(0).astype(int)
        else:
            full_df[box_id_col] = 0
            
        if place_col in full_df.columns:
            full_df[place_col] = full_df[place_col].astype(str)
        else:
            full_df[place_col] = ""

        for floor, floor_df in full_df.groupby('floor'):
            category_data.setdefault(floor, {})
            
            if floor == 1:
                floor_config = CONFIG.get('fill_thresholds_per_floor', {}).get(str(floor), {})
                for cat_name in floor_config:
                    if cat_name != "–û–±—â–µ–µ":
                        if cat_name == "–ö–ì–¢":
                             category_data[floor][cat_name] = {'–û–±—â–µ–µ': 0}
                        else:
                             category_data[floor][cat_name] = {'–°–ì–¢': 0, '–ú–ì–¢': 0}
                category_data[floor].setdefault('–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è', {'–û–±—â–µ–µ': 0})

                for _, row in floor_df.iterrows():
                    qty = row[qty_col]
                    box_id = row[box_id_col]
                    place_str = row[place_col]
                    row_num = row['row_num']
                    stellazh = -1
                    
                    try:
                        clean_place = place_str.replace("–ö–ó201.", "", 1) if place_str.startswith("–ö–ó201.") else place_str.replace("–ö–ó2.", "", 1)
                        parts = clean_place.split('.')
                        if len(parts) >= 3:
                            stellazh = int(parts[2])
                    except (ValueError, IndexError):
                        pass
                    
                    final_category = "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"
                    if 0 <= row_num <= 27 or row_num == 62:
                        final_category = "–ö–ì–¢"
                    elif 28 <= row_num <= 61:
                        if 47 <= row_num <= 48:
                            final_category = "–ö–æ—Å–º–µ—Ç–∏–∫–∞"
                        elif 1 <= stellazh <= 98:
                            final_category = "–ö–æ—Å–º–µ—Ç–∏–∫–∞"
                        elif 105 <= stellazh <= 208:
                            final_category = "–•–∏–º–∏—è"
                    
                    if final_category in category_data[floor]:
                        if final_category == "–ö–ì–¢":
                            category_data[floor][final_category]['–û–±—â–µ–µ'] += qty
                        else:
                            category_data[floor][final_category]['–°–ì–¢' if box_id == 0 else '–ú–ì–¢'] += qty
                    else:
                        category_data[floor]['–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è']['–û–±—â–µ–µ'] += qty
            else:
                category_data[floor].setdefault('–ü–æ–ª–æ—á–Ω—ã–π —Ç–æ–≤–∞—Ä', {'–û–±—â–µ–µ': 0})
                category_data[floor].setdefault('–ö–æ—Ä–æ–±–æ—á–Ω—ã–π —Ç–æ–≤–∞—Ä', {'–û–±—â–µ–µ': 0})
                
                shelf_goods = floor_df[floor_df[box_id_col] == 0][qty_col].sum()
                box_goods = floor_df[floor_df[box_id_col] != 0][qty_col].sum()
                
                category_data[floor]['–ü–æ–ª–æ—á–Ω—ã–π —Ç–æ–≤–∞—Ä']['–û–±—â–µ–µ'] = shelf_goods
                category_data[floor]['–ö–æ—Ä–æ–±–æ—á–Ω—ã–π —Ç–æ–≤–∞—Ä']['–û–±—â–µ–µ'] = box_goods
        
        row_summary = full_df.groupby(['floor', 'row_num'])[qty_col].sum().reset_index()
        for _, row in row_summary.iterrows():
            floor_val = int(row['floor'])
            row_num_val = int(row['row_num'])
            current_total_row = row[qty_col]
            
            row_thresholds = CONFIG.get('fill_thresholds_per_row', {}).get(str(floor_val), {}).get(str(row_num_val))
            
            if row_thresholds:
                row_status, row_percent, row_color = self.get_status_by_thresholds(current_total_row, row_thresholds)
                items_to_95 = max(0, int(row_thresholds.get('95%', 0) - current_total_row))
                row_data.append({
                    '–≠—Ç–∞–∂': floor_val, 
                    '–†—è–¥': row_num_val, 
                    '–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª-–≤–æ –®–ö': current_total_row, 
                    '–ú–∞–∫—Å. –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (100%)': row_thresholds.get('100%'), 
                    '% –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è': row_percent, 
                    '–û—Å—Ç–∞–ª–æ—Å—å –®–ö –¥–æ 95%': items_to_95, 
                    '–°—Ç–∞—Ç—É—Å': row_status, 
                    '–¶–≤–µ—Ç': row_color
                })
        return category_data, row_data

    def generate_reports(self, report_name, category_data, row_data):
        txt_filename = f'summary_report_{report_name}_{datetime.now().strftime("%Y-%m-%d")}.txt'
        report_lines = ["*" * 60, f"–°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º ({datetime.now().strftime('%Y-%m-%d %H:%M')})", "*" * 60 + "\n"]
        
        grand_total = 0
        for floor_data in category_data.values():
            for cat_data in floor_data.values():
                grand_total += sum(cat_data.values())

        wh_thresholds = CONFIG.get('fill_thresholds_per_floor', {}).get('–û–±—â–∞—è_–ü–ª–æ—â–∞–¥–∫–∞', {}).get('–û–±—â–µ–µ')
        wh_status, wh_percent, _ = self.get_status_by_thresholds(grand_total, wh_thresholds)
        report_lines.extend([
            "--- –û–ë–©–ê–Ø –ó–ê–ü–û–õ–ù–ï–ù–ù–û–°–¢–¨ –°–ö–õ–ê–î–ê ---",
            f"  > –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {grand_total:,.0f} —à—Ç.".replace(',', ' '),
            f"  > –°–¢–ê–¢–£–°: {wh_status} ({wh_percent:.1f}%)\n",
            "--- –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û –≠–¢–ê–ñ–ê–ú –ò –ö–ê–¢–ï–ì–û–†–ò–Ø–ú ---"
        ])

        for floor, floor_data in sorted(category_data.items()):
            total_floor = 0
            for cat_data in floor_data.values():
                total_floor += sum(cat_data.values())
            
            floor_thresholds = CONFIG.get('fill_thresholds_per_floor', {}).get(str(floor), {}).get('–û–±—â–µ–µ')
            floor_status, floor_percent, _ = self.get_status_by_thresholds(total_floor, floor_thresholds)
            report_lines.append(f"\n## –≠–¢–ê–ñ {floor} (–í—Å–µ–≥–æ: {total_floor:,.0f} —à—Ç. | –°–¢–ê–¢–£–°: {floor_status} ({floor_percent:.1f}%))".replace(',', ' '))
            
            for category, cat_data in sorted(floor_data.items()):
                if category == '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è' and sum(cat_data.values()) == 0:
                    continue
                
                cat_total = sum(cat_data.values())
                cat_thresholds = CONFIG.get('fill_thresholds_per_floor', {}).get(str(floor), {}).get(category)
                cat_status, cat_percent, _ = self.get_status_by_thresholds(cat_total, cat_thresholds)
                report_lines.append(f"  - –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category} (–í—Å–µ–≥–æ: {cat_total:,.0f} —à—Ç.) - –°–¢–ê–¢–£–°: {cat_status} ({cat_percent:.1f}%)".replace(',', ' '))
                
                if '–°–ì–¢' in cat_data:
                    report_lines.append(f"    - –°–ì–¢: {cat_data.get('–°–ì–¢', 0):,.0f} —à—Ç.".replace(',', ' '))
                    report_lines.append(f"    - –ú–ì–¢: {cat_data.get('–ú–ì–¢', 0):,.0f} —à—Ç.".replace(',', ' '))
        
        final_report_text = "\n".join(report_lines)
        self.log("\n" + final_report_text)
        
        try:
            with open(txt_filename, 'w', encoding='utf-8') as f:
                f.write(final_report_text)
            self.log(f"\n‚úì –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {txt_filename}")
        except Exception as e:
            self.log(f"‚úó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç: {e}")
            
        if not row_data:
            self.log("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Excel –æ—Ç—á–µ—Ç–∞.")
            return
            
        excel_filename = f'detailed_report_{report_name}_{datetime.now().strftime("%Y-%m-%d")}.xlsx'
        df = pd.DataFrame(row_data)
        df.sort_values(by=['–≠—Ç–∞–∂', '–†—è–¥'], inplace=True)
        
        try:
            with pd.ExcelWriter(excel_filename, engine='openpyxl') as writer:
                for floor_num, floor_df in df.groupby('–≠—Ç–∞–∂'):
                    sheet_name = f"–≠—Ç–∞–∂ {floor_num}"
                    display_cols = ['–†—è–¥', '–ú–∞–∫—Å. –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (100%)', '–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª-–≤–æ –®–ö', '% –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è', '–û—Å—Ç–∞–ª–æ—Å—å –®–ö –¥–æ 95%', '–°—Ç–∞—Ç—É—Å']
                    final_df = floor_df.reindex(columns=display_cols).fillna('N/A')
                    final_df.to_excel(writer, sheet_name=sheet_name, index=False)
                    ws = writer.sheets[sheet_name]
                    
                    for r_idx, row in floor_df.iterrows():
                        if '–¶–≤–µ—Ç' in row and row['–¶–≤–µ—Ç']:
                            excel_row_index = ws.max_row - len(floor_df) + (r_idx - floor_df.index[0]) + 1
                            if excel_row_index <= ws.max_row:
                                for cell in ws[excel_row_index]:
                                    cell.fill = row['–¶–≤–µ—Ç']
                                    
                    for i, col_name in enumerate(final_df.columns):
                        max_length = max(final_df[col_name].astype(str).map(len).max(), len(col_name))
                        ws.column_dimensions[get_column_letter(i + 1)].width = max_length + 2
            self.log(f"‚úì Excel-–æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {excel_filename}\n")
        except Exception as e:
            self.log(f"‚úó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å Excel-–æ—Ç—á–µ—Ç: {e}")

    def upload_to_gsheets(self, row_data):
        g_settings = CONFIG.get('google_sheets_settings')
        if not g_settings or not g_settings.get('sheet_id'):
            self.log("ID —Ç–∞–±–ª–∏—Ü—ã Google Sheets –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
            return
            
        self.log("\n" + "-" * 20 + " –í–´–ì–†–£–ó–ö–ê –í GOOGLE SHEETS " + "-" * 20)
        df = pd.DataFrame(row_data)
        if df.empty:
            self.log("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –≤ Google Sheets.")
            return
            
        df = df.drop(columns=['–¶–≤–µ—Ç'], errors='ignore')
        for floor_num, floor_df in df.groupby('–≠—Ç–∞–∂'):
            if floor_df.empty:
                self.log(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –Ω–∞ –≠—Ç–∞–∂ {floor_num}.")
                continue
                
            display_df = floor_df.copy()
            if '% –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' in display_df.columns:
                display_df['% –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'] = display_df['% –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'].apply(lambda x: f"{x:.1f}%" if pd.notna(x) else "N/A")
                
            cols_order = ['–†—è–¥', '–ú–∞–∫—Å. –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (100%)', '–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª-–≤–æ –®–ö', '% –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è', '–û—Å—Ç–∞–ª–æ—Å—å –®–ö –¥–æ 95%', '–°—Ç–∞—Ç—É—Å']
            final_df = display_df.reindex(columns=cols_order).fillna('N/A')
            worksheet_name = f"–≠—Ç–∞–∂ {floor_num}"
            
            try:
                scopes = ['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive']
                creds = Credentials.from_service_account_file(CREDENTIALS_FILE, scopes=scopes)
                gc = gspread.authorize(creds)
                sh = gc.open_by_key(g_settings['sheet_id'])
                
                try:
                    worksheet = sh.worksheet(worksheet_name)
                    worksheet.clear()
                    self.log(f"–û—á–∏—â–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–∏—Å—Ç '{worksheet_name}'.")
                except gspread.exceptions.WorksheetNotFound:
                    worksheet = sh.add_worksheet(title=worksheet_name, rows=len(final_df) + 1, cols=len(final_df.columns))
                    self.log(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ª–∏—Å—Ç '{worksheet_name}'.")
                    
                worksheet.update([final_df.columns.values.tolist()] + final_df.astype(str).values.tolist(), value_input_option='USER_ENTERED')
                self.log(f"‚úì –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤–∫–ª–∞–¥–∫—É '{worksheet_name}'")
            except Exception as e:
                self.log(f"‚úó –û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –≤ Google Sheets ({worksheet_name}): {e}")

    def run_main_logic(self, username, password):
        if not self.load_config():
            return
        try:
            with requests.Session() as session:
                token = self.login_and_get_token(session, CONFIG['api_settings']['login_url'], username, password)
                if not token:
                    return
                full_df = self.download_and_process_data(session, token)
                
            category_data, row_data = self.analyze_data(full_df)
            
            if category_data or row_data:
                config_name = os.path.splitext(os.path.basename(CONFIG_FILE))[0]
                final_report_name = f"–°–≤–æ–¥–Ω—ã–π_–û—Ç—á–µ—Ç_{config_name}"
                self.log("\n" + "=" * 60 + "\n–ì–ï–ù–ï–†–ê–¶–ò–Ø –°–í–û–î–ù–´–• –û–¢–ß–ï–¢–û–í\n" + "=" * 60)
                self.generate_reports(final_report_name, category_data, row_data)
                self.upload_to_gsheets(row_data)
            else:
                self.log("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤.")
                
            self.log("\n\n–†–∞–±–æ—Ç–∞ —Å–∫—Ä–∏–ø—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        except Exception as e:
            self.log(f"\n–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")

# --- –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (Frontend) –Ω–∞ CustomTkinter ---
class App(ctk.CTk):
    def __init__(self):
        super().__init__()
        
        self.title("K2 Report Generator")
        self.geometry("420x600")
        self.resizable(False, False)
        self.configure(fg_color="#1a1a1a")

        main_frame = ctk.CTkFrame(self, fg_color="#2b2b2b", corner_radius=15)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        logo_label = ctk.CTkLabel(main_frame, text="K2", font=ctk.CTkFont(family="Segoe UI", size=32, weight="bold"), text_color="white")
        logo_label.pack(pady=(20, 15))
        
        self.phone_entry = ctk.CTkEntry(main_frame, placeholder_text="Phone Number", font=ctk.CTkFont(family="Segoe UI", size=13), height=40, border_width=0, corner_radius=8, fg_color="#3c3c3c")
        self.phone_entry.pack(pady=7, padx=30, fill='x')

        self.password_entry = ctk.CTkEntry(main_frame, placeholder_text="Password", show="*", font=ctk.CTkFont(family="Segoe UI", size=13), height=40, border_width=0, corner_radius=8, fg_color="#3c3c3c")
        self.password_entry.pack(pady=7, padx=30, fill='x')
        
        log_title = ctk.CTkLabel(main_frame, text="Logs", font=ctk.CTkFont(family="Segoe UI", size=11, weight="bold"), text_color="#b0b0b0")
        log_title.pack(pady=(20, 5), padx=30, anchor="w")
        
        self.log_text = ctk.CTkTextbox(main_frame, activate_scrollbars=True, corner_radius=8, fg_color="#1c1c1c", text_color="#d0d0d0", font=ctk.CTkFont(family="Consolas", size=9), border_width=0)
        self.log_text.pack(pady=5, padx=30, fill='both', expand=True)
        self.log_text.configure(state="disabled")

        self.run_button = ctk.CTkButton(main_frame, text="Run Report", font=ctk.CTkFont(family="Segoe UI", size=16, weight="bold"), height=50, corner_radius=10, fg_color="#8e2de2", hover_color="#4a00e0", command=self.start_report_thread)
        self.run_button.pack(pady=20, padx=30, fill='x')
        
        self.log_queue = queue.Queue()
        self.backend = BackendLogic(self.log_queue)
        self.after(100, self.process_log_queue)

    def log_message(self, message):
        self.log_text.configure(state="normal")
        self.log_text.insert("end", message + "\n")
        self.log_text.configure(state="disabled")
        self.log_text.yview_moveto(1.0)

    def process_log_queue(self):
        try:
            while True:
                self.log_message(self.log_queue.get_nowait())
        except queue.Empty:
            pass
        self.after(100, self.process_log_queue)

    def start_report_thread(self):
        username = self.phone_entry.get()
        password = self.password_entry.get()
        if not username or not password:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø–∞—Ä–æ–ª—å.")
            return

        self.run_button.configure(state="disabled", text="–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...")
        self.log_text.configure(state="normal")
        self.log_text.delete('1.0', "end")
        self.log_text.configure(state="disabled")
        
        self.thread = threading.Thread(target=self.backend.run_main_logic, args=(username, password))
        self.thread.daemon = True
        self.thread.start()
        self.after(100, self.check_thread)

    def check_thread(self):
        if self.thread.is_alive():
            self.after(100, self.check_thread)
        else:
            self.run_button.configure(state="normal", text="Run Report")
            messagebox.showinfo("–ó–∞–≤–µ—Ä—à–µ–Ω–æ", "–ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    ctk.set_appearance_mode("dark")
    app = App()
    app.mainloop()

